// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                    String  @id @default(cuid())
  userId                String
  type                  String
  provider              String
  providerAccountId     String
  refreshTokenExpiresIn String?
  refresh_token         String?
  access_token          String?
  expires_at            Int?
  token_type            String?
  scope                 String?
  id_token              String?
  session_state         String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now()) @map("created_at")

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  superAdmin    Boolean   @default(false)
  accounts      Account[]
  sessions      Session[]
  tickets       Ticket[]  @relation("UserTickets")
  events        Event[]   @relation("UserEvents")
}

model Event {
  id                     String   @id @default(cuid())
  name                   String   @unique
  slug                   String   @unique
  description            String
  date                   DateTime
  location               String
  image                  String?
  vipTicketPrice         Float? // Prix du billet VIP
  standardTicketPrice    Float // Prix du billet standard
  vipTicketCapacity      Int? // Capacité du billet VIP
  standardTicketCapacity Int // Capacité du billet stand
  tickets                Ticket[]
  createdBy              User     @relation("UserEvents", fields: [createdById], references: [id])
  createdById            String
  approved               Boolean  @default(false)
}

model Ticket {
  id         String   @id @default(cuid())
  eventId    String
  userId     String?
  price      Float
  status     String   @default("available")
  qrCodePath String?
  createdAt  DateTime @default(now())
  event      Event    @relation(fields: [eventId], references: [id], onDelete: Cascade) // Définition de l'argument onDelete ici
  buyer      User?    @relation("UserTickets", fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// J'ai suivi la documentation du nouveau [Prisma Adapter](https://authjs.dev/reference/adapter/prisma).

// Crée aussi un fichier :

// ```ts
// // src/lib/auth.ts
// import { GetServerSidePropsContext, NextApiRequest, NextApiResponse } from 'next';
// import { getServerSession } from 'next-auth';
// import { authOptions } from '../../pages/api/auth/[...nextauth]';

// type ParametersGetServerSession =
//   | []
//   | [GetServerSidePropsContext['req'], GetServerSidePropsContext['res']]
//   | [NextApiRequest, NextApiResponse];

// export const getAuthSession = async (...parameters: ParametersGetServerSession) => {
//   const session = await getServerSession(...parameters, authOptions);
//   return session;
// };
